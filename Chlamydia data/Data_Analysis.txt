##################################################################
##################################################################
#### This script reads in the Chlamydia group testing data
#### and structures it in the necessary way for the model
#### fitting routines
##################################################################
##################################################################

set.seed(1)
data<-read.csv("GT_Chlamydia_Data.csv",header=TRUE)
library(mvtnorm)
library(truncnorm)
library(Rcpp)

##################################################################
# Replace NA individual tests with 0 -- for data structuring only
# NA individual test means pool tested negative, so contributing
# members are diagnosed negative

id = which(is.na(data$Ind.C.Result))
data$Ind.C.Result[id] = 0



##################################################################
# Divide the data into Swab and Urine data sets
# Note that Urine samples are tested individually (pool size = 1)

pool.id<-data$Pool.ID
data.gts<-data[!is.na(pool.id),]
data.ind<-data[is.na(pool.id),]


##################################################################
# Creating the design matrices

X.ind<-cbind(1,data.ind[,6:12])
X.pool<-cbind(1,data.gts[,6:12])


###################################################################
# Building the Z and Y matrices

Z.ind.C<-matrix(-99,nrow=dim(data.ind)[1],ncol=7)
Y.ind.C<-matrix(-99,nrow=dim(data.ind)[1],ncol=4)

Z.pool.C<-matrix(-99,nrow=dim(data.gts)[1],ncol=7)
Y.pool.C<-matrix(-99,nrow=dim(data.gts)[1],ncol=4)


##################################
# For Swab testing

id.ind<-1:(dim(data.gts)[1])

pool.id<-unique(data.gts$Pool.ID)
n<-length(pool.id)

track.CT<-1

for(i in 1:n){

temp<-data.gts[data.gts$Pool.ID==pool.id[i],]
temp.id<-id.ind[data.gts$Pool.ID==pool.id[i]]

CT.res <- temp$Ind.C.Result

cj<-length(CT.res)

CT.retest<- sum(CT.res)>0

Z.pool.C[track.CT,1]<-CT.retest
Z.pool.C[track.CT,2]<-cj
Z.pool.C[track.CT,3]<-1		## swab pool assay used
Z.pool.C[track.CT,4:(cj+3)]<-temp.id

Y.pool.C[temp.id,1]<-0
Y.pool.C[temp.id,2]<-1
Y.pool.C[temp.id,3]<-track.CT

if(CT.retest==0){
track.CT<-track.CT+1
}

if(CT.retest>0){
tid<-(track.CT+1):(track.CT+cj)
Z.pool.C[tid,1]<-CT.res
Z.pool.C[tid,2]<-1
Z.pool.C[tid,3]<-2		## swab individual assay used
Z.pool.C[tid,4]<-temp.id

Y.pool.C[temp.id,1]<-CT.res	## Diagnosed status
Y.pool.C[temp.id,2]<-2
Y.pool.C[temp.id,4]<-tid
track.CT<-max(tid)+1
}
}


Z.pool.C<-Z.pool.C[1:(track.CT-1),]

ZnC<-dim(Z.pool.C)[1]
YnC<-dim(Y.pool.C)[1]





#################################
# For Urine testing

Z.ind.C[,1]<-data.ind$Ind.C.Result 	## Test outcome for Chlamydia
Z.ind.C[,2]<-1                          ## Pool size    
Z.ind.C[,3]<-3				## urine assay used
Z.ind.C[,4]<-(1:(dim(data.ind)[1]))+YnC

Y.ind.C[,1]<-data.ind$Ind.C.Result	## Diagnosed status
Y.ind.C[,2]<-1
Y.ind.C[,3]<-1:(dim(data.ind)[1])+ZnC


###################################################
# Putting everything together 

X<-rbind(X.pool,X.ind)
Z.C<-rbind(Z.pool.C,Z.ind.C)
Y.C<-rbind(Y.pool.C,Y.ind.C)



###################################################
# Adding clinic ID to Y matrices
Y.C = cbind(Y.C[,1:2], -99, Y.C[,3:4])

Y.C[1:dim(data.gts)[1],3] = data.gts$Clinic.ID
Y.C[(dim(data.gts)[1]+1):dim(Y.C)[1],3] = data.ind$Clinic.ID

#####################################################################
# Reenumerate Clinic ID -- needed for coding structure of routines

clinic.id = unique(Y.C[,3])
K = length(clinic.id)

Y.C.new = Y.C

for(i in 1:K){
	tmp.id = which(Y.C[,3] == clinic.id[i])
	Y.C.new[tmp.id,3] = i
}

Y.C = Y.C.new


###################################################
# Source model fitting routine

source("GT_mixedmodel_Dirac.txt")




###################################################
## Standardize design matrix

X = X[,-1]
Xstd = t((t(X) - apply(X, 2, mean)) / apply(X, 2, sd))
Xt = cbind(1,Xstd)


###################################################
## Fit the model

t1 = Sys.time()
res = GT_mixedmodel_Dirac(G = Z.C, Y = Y.C, X = Xt, Z = Xt, link = "logistic")
t2 = Sys.time()


###################################################
# Analyze the results

range = 1001:2000

r1 = apply(res$beta[,range], 1, mean)
r2 = apply(res$beta[,range], 1, sd)
r3 = apply(res$v[,range], 1, mean)
cbind(r1,r2,r3)

r1 = apply(res$lambda[,range], 1, mean)
r2 = apply(res$lambda[,range], 1, sd)
r3 = apply(res$w[,range], 1, mean)
cbind(r1,r2,r3)

r1 = apply(res$se[,range], 1, mean)
r2 = apply(res$se[,range], 1, sd)
r3 = apply(res$sp[,range], 1, mean)
r4 = apply(res$sp[,range], 1, sd)
rbind(cbind(r1,r2),cbind(r3,r4))






